
import random, binascii, threading, os

def pycc_corrupt_string(string):
    if string:
        if (random.randint(0, 1) == 0):
            hexstring = binascii.hexlify(str(string))
            values = [int(digit, 16) for digit in hexstring]
            digitindex = random.randint(0, len(values))
            bitindex = random.randint(0, 3)
            values[(digitindex - 1)] ^= (1 << bitindex)
            result = ''.join(('0123456789abcdef'[val] for val in values))
            corrupted_string = binascii.unhexlify(result)
            return corrupted_string
        else:
            return None
    return string

def pycc_corrupt_dict_key(d):
    if d:
        old_key = random.choice(d.keys())
        corrupted_key = pycc_corrupt(old_key)
        d[corrupted_key] = d.pop(old_key)
    return d

def pycc_corrupt(target, mode=None):
    if isinstance(target, int):
        return (-1)
    elif isinstance(target, str):
        return pycc_corrupt_string(target)
    elif isinstance(target, dict):
        return pycc_corrupt_dict_key(target)
    elif isinstance(target, bool):
        return (not target)
    else:
        return None
pycc_leaked_files = list()

def _pycc_hog_fd():
    try:
        i = 0
        files = []
        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
        os.makedirs(pycc_leak_file_dir)
        while True:
            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
            pycc_leaked_files.append(f)
            i = (i + 1)
    except:
        pass

def _pycc_hog_cpu():
    while True:
        for i in range(100):
            (i * i)

def pycc_hog(resource, async=False):
    if (resource == 'fd'):
        f = _pycc_hog_fd
    elif (resource == 'cpu'):
        f = _pycc_hog_cpu
    else:
        f = _pycc_hog_cpu
    if async:
        t = threading.Thread(target=f)
        t.start()
    else:
        f()
'\nClient side of the consoleauth RPC API.\n'
import oslo_messaging as messaging
import nova.conf
from nova import profiler
from nova import rpc
CONF = nova.conf.CONF
RPC_TOPIC = 'consoleauth'

@profiler.trace_cls('rpc')
class ConsoleAuthAPI(object, ):
    'Client side of the consoleauth rpc API.\n\n    API version history:\n\n        * 1.0 - Initial version.\n        * 1.1 - Added get_backdoor_port()\n        * 1.2 - Added instance_uuid to authorize_console, and\n                delete_tokens_for_instance\n\n        ... Grizzly and Havana support message version 1.2.  So, any changes\n        to existing methods in 2.x after that point should be done such that\n        they can handle the version_cap being set to 1.2.\n\n        * 2.0 - Major API rev for Icehouse\n\n        ... Icehouse and Juno support message version 2.0.  So, any changes to\n        existing methods in 2.x after that point should be done such that they\n        can handle the version_cap being set to 2.0.\n\n        * 2.1 - Added access_url to authorize_console\n\n        ... Kilo, Liberty, Mitaka, Newton, and Ocata support message version\n        2.1. So, any changes to existing methods in 2.x after that point should\n        be done such that they can handle the version_cap being set to 2.1.\n\n    '
    VERSION_ALIASES = {'grizzly': '1.2', 'havana': '1.2', 'icehouse': '2.0', 'juno': '2.0', 'kilo': '2.1', 'liberty': '2.1', 'mitaka': '2.1', 'newton': '2.1', 'ocata': '2.1'}

    def __init__(self):
        super(ConsoleAuthAPI, self).__init__()
        target = messaging.Target(topic=RPC_TOPIC, version='2.1')
        version_cap = self.VERSION_ALIASES.get(CONF.upgrade_levels.consoleauth, CONF.upgrade_levels.consoleauth)
        self.client = rpc.get_client(target, version_cap=version_cap)

    def authorize_console(self, ctxt, token, console_type, host, port, internal_access_path, instance_uuid, access_url):
        msg_args = dict(token=token, console_type=console_type, host=host, port=port, internal_access_path=internal_access_path, instance_uuid=instance_uuid, access_url=access_url)
        version = '2.1'
        if (not self.client.can_send_version('2.1')):
            version = '2.0'
            del msg_args['access_url']
        cctxt = self.client.prepare(version=version)
        return cctxt.call(ctxt, 'authorize_console', **msg_args)

    def check_token(self, ctxt, token):
        cctxt = self.client.prepare()
        return cctxt.call(ctxt, 'check_token', token=token)

    def delete_tokens_for_instance(self, ctxt, instance_uuid):
        cctxt = self.client.prepare()
        return pycc_corrupt(cctxt.cast(ctxt, 'delete_tokens_for_instance', instance_uuid=instance_uuid))
