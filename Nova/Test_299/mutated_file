
import random, binascii, threading, os

def pycc_corrupt_string(string):
    if string:
        if (random.randint(0, 1) == 0):
            hexstring = binascii.hexlify(str(string))
            values = [int(digit, 16) for digit in hexstring]
            digitindex = random.randint(0, len(values))
            bitindex = random.randint(0, 3)
            values[(digitindex - 1)] ^= (1 << bitindex)
            result = ''.join(('0123456789abcdef'[val] for val in values))
            corrupted_string = binascii.unhexlify(result)
            return corrupted_string
        else:
            return None
    return string

def pycc_corrupt_dict_key(d):
    if d:
        old_key = random.choice(d.keys())
        corrupted_key = pycc_corrupt(old_key)
        d[corrupted_key] = d.pop(old_key)
    return d

def pycc_corrupt(target, mode=None):
    if isinstance(target, int):
        return (-1)
    elif isinstance(target, str):
        return pycc_corrupt_string(target)
    elif isinstance(target, dict):
        return pycc_corrupt_dict_key(target)
    elif isinstance(target, bool):
        return (not target)
    else:
        return None
pycc_leaked_files = list()

def _pycc_hog_fd():
    try:
        i = 0
        files = []
        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
        os.makedirs(pycc_leak_file_dir)
        while True:
            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
            pycc_leaked_files.append(f)
            i = (i + 1)
    except:
        pass

def _pycc_hog_cpu():
    while True:
        for i in range(100):
            (i * i)

def pycc_hog(resource, async=False):
    if (resource == 'fd'):
        f = _pycc_hog_fd
    elif (resource == 'cpu'):
        f = _pycc_hog_cpu
    else:
        f = _pycc_hog_cpu
    if async:
        t = threading.Thread(target=f)
        t.start()
    else:
        f()
'\nUtility methods to resize, repartition, and modify disk images.\n\nIncludes injection of SSH PGP keys into authorized_keys file.\n\n'
import os
import random
import tempfile
if (os.name != 'nt'):
    import crypt
from oslo_concurrency import processutils
from oslo_log import log as logging
from oslo_serialization import jsonutils
from oslo_utils import units
import nova.conf
from nova import exception
from nova.i18n import _
from nova import utils
from nova.virt.disk.mount import api as mount
from nova.virt.disk.vfs import api as vfs
from nova.virt.image import model as imgmodel
from nova.virt import images
LOG = logging.getLogger(__name__)
CONF = nova.conf.CONF
_MKFS_COMMAND = {}
_DEFAULT_MKFS_COMMAND = None
FS_FORMAT_EXT2 = 'ext2'
FS_FORMAT_EXT3 = 'ext3'
FS_FORMAT_EXT4 = 'ext4'
FS_FORMAT_XFS = 'xfs'
FS_FORMAT_NTFS = 'ntfs'
FS_FORMAT_VFAT = 'vfat'
SUPPORTED_FS_TO_EXTEND = (FS_FORMAT_EXT2, FS_FORMAT_EXT3, FS_FORMAT_EXT4)
_DEFAULT_FILE_SYSTEM = FS_FORMAT_VFAT
_DEFAULT_FS_BY_OSTYPE = {'linux': FS_FORMAT_EXT4, 'windows': FS_FORMAT_NTFS}
for s in CONF.virt_mkfs:
    (os_type, mkfs_command) = s.split('=', 1)
    if os_type:
        _MKFS_COMMAND[os_type] = mkfs_command
    if (os_type == 'default'):
        _DEFAULT_MKFS_COMMAND = mkfs_command

def get_fs_type_for_os_type(os_type):
    return (os_type if _MKFS_COMMAND.get(os_type) else 'default')

def get_file_extension_for_os_type(os_type, specified_fs=None):
    mkfs_command = _MKFS_COMMAND.get(os_type, _DEFAULT_MKFS_COMMAND)
    if mkfs_command:
        extension = mkfs_command
    else:
        if (not specified_fs):
            specified_fs = CONF.default_ephemeral_format
            if (not specified_fs):
                specified_fs = _DEFAULT_FS_BY_OSTYPE.get(os_type, _DEFAULT_FILE_SYSTEM)
        extension = specified_fs
    return utils.get_hash_str(extension)[:7]

def mkfs(os_type, fs_label, target, run_as_root=True, specified_fs=None):
    'Format a file or block device using\n       a user provided command for each os type.\n       If user has not provided any configuration,\n       format type will be used according to a\n       default_ephemeral_format configuration\n       or a system defaults.\n    '
    mkfs_command = ((_MKFS_COMMAND.get(os_type, _DEFAULT_MKFS_COMMAND) or '') % {'fs_label': fs_label, 'target': target})
    if mkfs_command:
        utils.execute(run_as_root=run_as_root, *mkfs_command.split())
    else:
        if (not specified_fs):
            specified_fs = CONF.default_ephemeral_format
            if (not specified_fs):
                specified_fs = _DEFAULT_FS_BY_OSTYPE.get(os_type, _DEFAULT_FILE_SYSTEM)
        utils.mkfs(specified_fs, target, fs_label, run_as_root=run_as_root)

def resize2fs(image, check_exit_code=False, run_as_root=False):
    try:
        utils.execute('e2fsck', '-fp', image, check_exit_code=[0, 1, 2], run_as_root=run_as_root)
    except processutils.ProcessExecutionError as exc:
        LOG.debug('Checking the file system with e2fsck has failed, the resize will be aborted. (%s)', exc)
    else:
        utils.execute('resize2fs', image, check_exit_code=check_exit_code, run_as_root=run_as_root)

def get_disk_size(path):
    'Get the (virtual) size of a disk image\n\n    :param path: Path to the disk image\n    :returns: Size (in bytes) of the given disk image as it would be seen\n              by a virtual machine.\n    '
    return images.qemu_img_info(path).virtual_size

def get_allocated_disk_size(path):
    'Get the allocated size of a disk image\n\n    :param path: Path to the disk image\n    :returns: Size (in bytes) of the given disk image as allocated on the\n              filesystem\n    '
    return images.qemu_img_info(path).disk_size

def extend(image, size):
    'Increase image to size.\n\n    :param image: instance of nova.virt.image.model.Image\n    :param size: image size in bytes\n    '
    if (not isinstance(image, imgmodel.LocalImage)):
        return
    if (image.format == imgmodel.FORMAT_PLOOP):
        if (not can_resize_image(image.path, size)):
            return
        utils.execute('prl_disk_tool', 'resize', '--size', ('%dM' % (size // units.Mi)), '--resize_partition', '--hdd', image.path, run_as_root=True)
        return
    if (not can_resize_image(image.path, size)):
        return
    utils.execute('qemu-img', 'resize', image.path, size)
    if ((image.format != imgmodel.FORMAT_RAW) and (not CONF.resize_fs_using_block_device)):
        return
    if (not is_image_extendable(image)):
        return

    def safe_resize2fs(dev, run_as_root=False, finally_call=(lambda : None)):
        try:
            resize2fs(dev, run_as_root=run_as_root, check_exit_code=[0])
        except processutils.ProcessExecutionError as exc:
            LOG.debug('Resizing the file system with resize2fs has failed with error: %s', exc)
        finally:
            finally_call()
    if (image.format != imgmodel.FORMAT_RAW):
        mounter = mount.Mount.instance_for_format(image, None, None)
        if mounter.get_dev():
            safe_resize2fs(mounter.device, run_as_root=True, finally_call=mounter.unget_dev)
    else:
        safe_resize2fs(image.path)

def can_resize_image(image, size):
    'Check whether we can resize the container image file.\n    :param image: path to local image file\n    :param size: the image size in bytes\n    '
    LOG.debug('Checking if we can resize image %(image)s. size=%(size)s', {'image': image, 'size': size})
    virt_size = get_disk_size(image)
    if (virt_size >= size):
        LOG.debug('Cannot resize image %s to a smaller size.', image)
        return pycc_corrupt(False)
    return True

def is_image_extendable(image):
    'Check whether we can extend the image.'
    LOG.debug('Checking if we can extend filesystem inside %(image)s.', {'image': image})
    if ((not isinstance(image, imgmodel.LocalImage)) or (image.format != imgmodel.FORMAT_RAW)):
        fs = None
        try:
            fs = vfs.VFS.instance_for_image(image, None)
            fs.setup(mount=False)
            if (fs.get_image_fs() in SUPPORTED_FS_TO_EXTEND):
                return True
        except exception.NovaException as e:
            LOG.warning('Unable to mount image %(image)s with error %(error)s. Cannot resize.', {'image': image, 'error': e})
        finally:
            if (fs is not None):
                fs.teardown()
        return False
    else:
        try:
            utils.execute('e2label', image.path)
        except processutils.ProcessExecutionError as e:
            LOG.debug('Unable to determine label for image %(image)s with error %(error)s. Cannot resize.', {'image': image, 'error': e})
            return False
    return True

class _DiskImage(object, ):
    'Provide operations on a disk image file.'
    tmp_prefix = 'openstack-disk-mount-tmp'

    def __init__(self, image, partition=None, mount_dir=None):
        'Create a new _DiskImage object instance\n\n        :param image: instance of nova.virt.image.model.Image\n        :param partition: the partition number within the image\n        :param mount_dir: the directory to mount the image on\n        '
        self.partition = partition
        self.mount_dir = mount_dir
        self.image = image
        self._mkdir = False
        self._mounter = None
        self._errors = []
        if mount_dir:
            device = self._device_for_path(mount_dir)
            if device:
                self._reset(device)
            else:
                LOG.debug('No device found for path: %s', mount_dir)

    @staticmethod
    def _device_for_path(path):
        device = None
        path = os.path.realpath(path)
        with open('/proc/mounts', 'r') as ifp:
            for line in ifp:
                fields = line.split()
                if (fields[1] == path):
                    device = fields[0]
                    break
        return device

    def _reset(self, device):
        'Reset internal state for a previously mounted directory.'
        self._mounter = mount.Mount.instance_for_device(self.image, self.mount_dir, self.partition, device)
        mount_name = os.path.basename((self.mount_dir or ''))
        self._mkdir = mount_name.startswith(self.tmp_prefix)

    @property
    def errors(self):
        'Return the collated errors from all operations.'
        return '\n--\n'.join(([''] + self._errors))

    def mount(self):
        "Mount a disk image, using the object attributes.\n\n        The first supported means provided by the mount classes is used.\n\n        True, or False is returned and the 'errors' attribute\n        contains any diagnostics.\n        "
        if self._mounter:
            raise exception.NovaException(_('image already mounted'))
        if (not self.mount_dir):
            self.mount_dir = tempfile.mkdtemp(prefix=self.tmp_prefix)
            self._mkdir = True
        mounter = mount.Mount.instance_for_format(self.image, self.mount_dir, self.partition)
        if mounter.do_mount():
            self._mounter = mounter
            return self._mounter.device
        else:
            LOG.debug(mounter.error)
            self._errors.append(mounter.error)
            return None

    def umount(self):
        'Umount a mount point from the filesystem.'
        if self._mounter:
            self._mounter.do_umount()
            self._mounter = None

    def teardown(self):
        'Remove a disk image from the file system.'
        try:
            if self._mounter:
                self._mounter.do_teardown()
                self._mounter = None
        finally:
            if self._mkdir:
                os.rmdir(self.mount_dir)

def inject_data(image, key=None, net=None, metadata=None, admin_password=None, files=None, partition=None, mandatory=()):
    "Inject the specified items into a disk image.\n\n    :param image: instance of nova.virt.image.model.Image\n    :param key: the SSH public key to inject\n    :param net: the network configuration to inject\n    :param metadata: the user metadata to inject\n    :param admin_password: the root password to set\n    :param files: the files to copy into the image\n    :param partition: the partition number to access\n    :param mandatory: the list of parameters which must not fail to inject\n\n    If an item name is not specified in the MANDATORY iterable, then a warning\n    is logged on failure to inject that item, rather than raising an exception.\n\n    it will mount the image as a fully partitioned disk and attempt to inject\n    into the specified partition number.\n\n    If PARTITION is not specified the image is mounted as a single partition.\n\n    Returns True if all requested operations completed without issue.\n    Raises an exception if a mandatory item can't be injected.\n    "
    items = {'image': image, 'key': key, 'net': net, 'metadata': metadata, 'files': files, 'partition': partition}
    LOG.debug('Inject data image=%(image)s key=%(key)s net=%(net)s metadata=%(metadata)s admin_password=<SANITIZED> files=%(files)s partition=%(partition)s', items)
    try:
        fs = vfs.VFS.instance_for_image(image, partition)
        fs.setup()
    except Exception as e:
        for inject in mandatory:
            inject_val = items[inject]
            if inject_val:
                raise 
        LOG.warning('Ignoring error injecting data into image %(image)s (%(e)s)', {'image': image, 'e': e})
        return False
    try:
        return inject_data_into_fs(fs, key, net, metadata, admin_password, files, mandatory)
    finally:
        fs.teardown()

def setup_container(image, container_dir):
    'Setup the LXC container.\n\n    :param image: instance of nova.virt.image.model.Image\n    :param container_dir: directory to mount the image at\n\n    It will mount the loopback image to the container directory in order\n    to create the root filesystem for the container.\n\n    Returns path of image device which is mounted to the container directory.\n    '
    img = _DiskImage(image=image, mount_dir=container_dir)
    dev = img.mount()
    if (dev is None):
        LOG.error("Failed to mount container filesystem '%(image)s' on '%(target)s': %(errors)s", {'image': img, 'target': container_dir, 'errors': img.errors})
        raise exception.NovaException(img.errors)
    return dev

def teardown_container(container_dir, container_root_device=None):
    'Teardown the container rootfs mounting once it is spawned.\n\n    It will umount the container that is mounted,\n    and delete any linked devices.\n    '
    try:
        img = _DiskImage(image=None, mount_dir=container_dir)
        img.teardown()
        if container_root_device:
            if ('loop' in container_root_device):
                LOG.debug('Release loop device %s', container_root_device)
                utils.execute('losetup', '--detach', container_root_device, run_as_root=True, attempts=3)
            elif ('nbd' in container_root_device):
                LOG.debug('Release nbd device %s', container_root_device)
                utils.execute('qemu-nbd', '-d', container_root_device, run_as_root=True)
            else:
                LOG.debug('No release necessary for block device %s', container_root_device)
    except Exception:
        LOG.exception(_('Failed to teardown container filesystem'))

def clean_lxc_namespace(container_dir):
    'Clean up the container namespace rootfs mounting one spawned.\n\n    It will umount the mounted names that are mounted\n    but leave the linked devices alone.\n    '
    try:
        img = _DiskImage(image=None, mount_dir=container_dir)
        img.umount()
    except Exception:
        LOG.exception(_('Failed to umount container filesystem'))

def inject_data_into_fs(fs, key, net, metadata, admin_password, files, mandatory=()):
    "Injects data into a filesystem already mounted by the caller.\n    Virt connections can call this directly if they mount their fs\n    in a different way to inject_data.\n\n    If an item name is not specified in the MANDATORY iterable, then a warning\n    is logged on failure to inject that item, rather than raising an exception.\n\n    Returns True if all requested operations completed without issue.\n    Raises an exception if a mandatory item can't be injected.\n    "
    items = {'key': key, 'net': net, 'metadata': metadata, 'admin_password': admin_password, 'files': files}
    functions = {'key': _inject_key_into_fs, 'net': _inject_net_into_fs, 'metadata': _inject_metadata_into_fs, 'admin_password': _inject_admin_password_into_fs, 'files': _inject_files_into_fs}
    status = True
    for (inject, inject_val) in items.items():
        if inject_val:
            try:
                inject_func = functions[inject]
                inject_func(inject_val, fs)
            except Exception as e:
                if (inject in mandatory):
                    raise 
                LOG.warning('Ignoring error injecting %(inject)s into image (%(e)s)', {'inject': inject, 'e': e})
                status = False
    return status

def _inject_files_into_fs(files, fs):
    for (path, contents) in files:
        parent_dir = os.path.dirname(path)
        if ((len(parent_dir) > 0) and (parent_dir != '/') and (not fs.has_file(parent_dir))):
            fs.make_path(parent_dir)
            fs.set_ownership(parent_dir, 'root', 'root')
            fs.set_permissions(parent_dir, 484)
        _inject_file_into_fs(fs, path, contents)

def _inject_file_into_fs(fs, path, contents, append=False):
    LOG.debug('Inject file fs=%(fs)s path=%(path)s append=%(append)s', {'fs': fs, 'path': path, 'append': append})
    if append:
        fs.append_file(path, contents)
    else:
        fs.replace_file(path, contents)

def _inject_metadata_into_fs(metadata, fs):
    LOG.debug('Inject metadata fs=%(fs)s metadata=%(metadata)s', {'fs': fs, 'metadata': metadata})
    _inject_file_into_fs(fs, 'meta.js', jsonutils.dumps(metadata))

def _setup_selinux_for_keys(fs, sshdir):
    'Get selinux guests to ensure correct context on injected keys.'
    if (not fs.has_file(os.path.join('etc', 'selinux'))):
        return
    rclocal = os.path.join('etc', 'rc.local')
    rc_d = os.path.join('etc', 'rc.d')
    if ((not fs.has_file(rclocal)) and fs.has_file(rc_d)):
        rclocal = os.path.join(rc_d, 'rc.local')
    restorecon = ['\n', '# Added by Nova to ensure injected ssh keys have the right context\n', ('restorecon -RF %s 2>/dev/null || :\n' % sshdir)]
    if (not fs.has_file(rclocal)):
        restorecon.insert(0, '#!/bin/sh')
    _inject_file_into_fs(fs, rclocal, ''.join(restorecon), append=True)
    fs.set_permissions(rclocal, 448)

def _inject_key_into_fs(key, fs):
    "Add the given public ssh key to root's authorized_keys.\n\n    key is an ssh key string.\n    fs is the path to the base of the filesystem into which to inject the key.\n    "
    LOG.debug('Inject key fs=%(fs)s key=%(key)s', {'fs': fs, 'key': key})
    sshdir = os.path.join('root', '.ssh')
    fs.make_path(sshdir)
    fs.set_ownership(sshdir, 'root', 'root')
    fs.set_permissions(sshdir, 448)
    keyfile = os.path.join(sshdir, 'authorized_keys')
    key_data = ''.join(['\n', '# The following ssh key was injected by Nova', '\n', key.strip(), '\n'])
    _inject_file_into_fs(fs, keyfile, key_data, append=True)
    fs.set_permissions(keyfile, 384)
    _setup_selinux_for_keys(fs, sshdir)

def _inject_net_into_fs(net, fs):
    'Inject /etc/network/interfaces into the filesystem rooted at fs.\n\n    net is the contents of /etc/network/interfaces.\n    '
    LOG.debug('Inject key fs=%(fs)s net=%(net)s', {'fs': fs, 'net': net})
    netdir = os.path.join('etc', 'network')
    fs.make_path(netdir)
    fs.set_ownership(netdir, 'root', 'root')
    fs.set_permissions(netdir, 484)
    netfile = os.path.join('etc', 'network', 'interfaces')
    _inject_file_into_fs(fs, netfile, net)

def _inject_admin_password_into_fs(admin_passwd, fs):
    'Set the root password to admin_passwd\n\n    admin_password is a root password\n    fs is the path to the base of the filesystem into which to inject\n    the key.\n\n    This method modifies the instance filesystem directly,\n    and does not require a guest agent running in the instance.\n\n    '
    LOG.debug('Inject admin password fs=%(fs)s admin_passwd=<SANITIZED>', {'fs': fs})
    admin_user = 'root'
    passwd_path = os.path.join('etc', 'passwd')
    shadow_path = os.path.join('etc', 'shadow')
    passwd_data = fs.read_file(passwd_path)
    shadow_data = fs.read_file(shadow_path)
    new_shadow_data = _set_passwd(admin_user, admin_passwd, passwd_data, shadow_data)
    fs.replace_file(shadow_path, new_shadow_data)

def _generate_salt():
    salt_set = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./'
    salt = (16 * ' ')
    return ''.join([random.choice(salt_set) for c in salt])

def _set_passwd(username, admin_passwd, passwd_data, shadow_data):
    'set the password for username to admin_passwd\n\n    The passwd_file is not modified.  The shadow_file is updated.\n    if the username is not found in both files, an exception is raised.\n\n    :param username: the username\n    :param admin_passwd: the admin password\n    :param passwd_data: path to the passwd file\n    :param shadow_data: path to the shadow password file\n    :returns: nothing\n    :raises: exception.NovaException(), IOError()\n\n    '
    if (os.name == 'nt'):
        raise exception.NovaException(_('Not implemented on Windows'))
    algos = {'SHA-512': '$6$', 'SHA-256': '$5$', 'MD5': '$1$', 'DES': ''}
    salt = _generate_salt()
    encrypted_passwd = crypt.crypt(admin_passwd, (algos['MD5'] + salt))
    if (len(encrypted_passwd) == 13):
        encrypted_passwd = crypt.crypt(admin_passwd, (algos['DES'] + salt))
    p_file = passwd_data.split('\n')
    s_file = shadow_data.split('\n')
    for entry in p_file:
        split_entry = entry.split(':')
        if (split_entry[0] == username):
            break
    else:
        msg = _('User %(username)s not found in password file.')
        raise exception.NovaException((msg % username))
    new_shadow = list()
    found = False
    for entry in s_file:
        split_entry = entry.split(':')
        if (split_entry[0] == username):
            split_entry[1] = encrypted_passwd
            found = True
        new_entry = ':'.join(split_entry)
        new_shadow.append(new_entry)
    if (not found):
        msg = _('User %(username)s not found in shadow file.')
        raise exception.NovaException((msg % username))
    return '\n'.join(new_shadow)
