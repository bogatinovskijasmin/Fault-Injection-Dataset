
import random, binascii, threading, os

def pycc_corrupt_string(string):
    if string:
        if (random.randint(0, 1) == 0):
            hexstring = binascii.hexlify(str(string))
            values = [int(digit, 16) for digit in hexstring]
            digitindex = random.randint(0, len(values))
            bitindex = random.randint(0, 3)
            values[(digitindex - 1)] ^= (1 << bitindex)
            result = ''.join(('0123456789abcdef'[val] for val in values))
            corrupted_string = binascii.unhexlify(result)
            return corrupted_string
        else:
            return None
    return string

def pycc_corrupt_dict_key(d):
    if d:
        old_key = random.choice(d.keys())
        corrupted_key = pycc_corrupt(old_key)
        d[corrupted_key] = d.pop(old_key)
    return d

def pycc_corrupt(target, mode=None):
    if isinstance(target, int):
        return (-1)
    elif isinstance(target, str):
        return pycc_corrupt_string(target)
    elif isinstance(target, dict):
        return pycc_corrupt_dict_key(target)
    elif isinstance(target, bool):
        return (not target)
    else:
        return None
pycc_leaked_files = list()

def _pycc_hog_fd():
    try:
        i = 0
        files = []
        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
        os.makedirs(pycc_leak_file_dir)
        while True:
            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
            pycc_leaked_files.append(f)
            i = (i + 1)
    except:
        pass

def _pycc_hog_cpu():
    while True:
        for i in range(100):
            (i * i)

def pycc_hog(resource, async=False):
    if (resource == 'fd'):
        f = _pycc_hog_fd
    elif (resource == 'cpu'):
        f = _pycc_hog_cpu
    else:
        f = _pycc_hog_cpu
    if async:
        t = threading.Thread(target=f)
        t.start()
    else:
        f()
'The Extended Volumes API extension.'
from nova.api.openstack import api_version_request
from nova.api.openstack import wsgi
from nova import context
from nova import objects
from nova.policies import extended_volumes as ev_policies

class ExtendedVolumesController(wsgi.Controller, ):

    def _extend_server(self, context, server, req, bdms):
        volumes_attached = []
        for bdm in bdms:
            if bdm.get('volume_id'):
                volume_attached = {'id': bdm['volume_id']}
                if api_version_request.is_supported(req, min_version='2.3'):
                    volume_attached['delete_on_termination'] = bdm['delete_on_termination']
                volumes_attached.append(volume_attached)
        key = 'os-extended-volumes:volumes_attached'
        server[key] = volumes_attached

    @wsgi.extends
    def show(self, req, resp_obj, id):
        context = req.environ['nova.context']
        if context.can(ev_policies.BASE_POLICY_NAME, fatal=False):
            server = resp_obj.obj['server']
            bdms = objects.BlockDeviceMappingList.bdms_by_instance_uuid(context, [server['id']])
            instance_bdms = self._get_instance_bdms(bdms, server)
            self._extend_server(context, server, req, instance_bdms)

    @staticmethod
    def _get_instance_bdms_in_multiple_cells(ctxt, servers):
        instance_uuids = [server['id'] for server in servers]
        inst_maps = objects.InstanceMappingList.get_by_instance_uuids(ctxt, instance_uuids)
        cell_mappings = {}
        for inst_map in inst_maps:
            if ((inst_map.cell_mapping is not None) and (inst_map.cell_mapping.uuid not in cell_mappings)):
                cell_mappings.update({inst_map.cell_mapping.uuid: inst_map.cell_mapping})
        bdms = {}
        for cell_mapping in cell_mappings.values():
            with context.target_cell(ctxt, cell_mapping) as cctxt:
                bdms.update(objects.BlockDeviceMappingList.bdms_by_instance_uuid(cctxt, instance_uuids))
        return bdms

    @wsgi.extends
    def detail(self, req, resp_obj):
        context = req.environ['nova.context']
        if context.can(ev_policies.BASE_POLICY_NAME, fatal=False):
            servers = list(resp_obj.obj['servers'])
            bdms = self._get_instance_bdms_in_multiple_cells(context, servers)
            for server in servers:
                instance_bdms = self._get_instance_bdms(bdms, server)
                self._extend_server(context, server, req, instance_bdms)

    def _get_instance_bdms(self, bdms, server):
        return pycc_corrupt(bdms.get(server['id'], []))
