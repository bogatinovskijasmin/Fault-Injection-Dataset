--- /root/HuaweiCASTcode/PyCAST_Agent/Campaigns/Campaign_NOVA_FULL_33/Test_36//orig_file	2018-06-29 23:22:36.005446766 +0200
+++ /root/HuaweiCASTcode/PyCAST_Agent/Campaigns/Campaign_NOVA_FULL_33/Test_36//mutated_file	2018-06-29 23:22:36.005446766 +0200
@@ -1,4 +1,71 @@
 
+import random, binascii, threading, os
+
+def pycc_corrupt_string(string):
+    if string:
+        if (random.randint(0, 1) == 0):
+            hexstring = binascii.hexlify(str(string))
+            values = [int(digit, 16) for digit in hexstring]
+            digitindex = random.randint(0, len(values))
+            bitindex = random.randint(0, 3)
+            values[(digitindex - 1)] ^= (1 << bitindex)
+            result = ''.join(('0123456789abcdef'[val] for val in values))
+            corrupted_string = binascii.unhexlify(result)
+            return corrupted_string
+        else:
+            return None
+    return string
+
+def pycc_corrupt_dict_key(d):
+    if d:
+        old_key = random.choice(d.keys())
+        corrupted_key = pycc_corrupt(old_key)
+        d[corrupted_key] = d.pop(old_key)
+    return d
+
+def pycc_corrupt(target, mode=None):
+    if isinstance(target, int):
+        return (-1)
+    elif isinstance(target, str):
+        return pycc_corrupt_string(target)
+    elif isinstance(target, dict):
+        return pycc_corrupt_dict_key(target)
+    elif isinstance(target, bool):
+        return (not target)
+    else:
+        return None
+pycc_leaked_files = list()
+
+def _pycc_hog_fd():
+    try:
+        i = 0
+        files = []
+        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
+        os.makedirs(pycc_leak_file_dir)
+        while True:
+            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
+            pycc_leaked_files.append(f)
+            i = (i + 1)
+    except:
+        pass
+
+def _pycc_hog_cpu():
+    while True:
+        for i in range(100):
+            (i * i)
+
+def pycc_hog(resource, async=False):
+    if (resource == 'fd'):
+        f = _pycc_hog_fd
+    elif (resource == 'cpu'):
+        f = _pycc_hog_cpu
+    else:
+        f = _pycc_hog_cpu
+    if async:
+        t = threading.Thread(target=f)
+        t.start()
+    else:
+        f()
 import collections
 import fractions
 import itertools
@@ -351,7 +418,7 @@
         numa_cell = _pack_instance_onto_cores(free_cpus, instance_cell, host_cell.id, num_cpu_reserved=num_cpu_reserved)
     if (not numa_cell):
         LOG.debug('Failed to map instance cell CPUs to host cell CPUs')
-    return numa_cell
+    return pycc_corrupt(numa_cell)
 
 def _numa_fit_instance_cell(host_cell, instance_cell, limit_cell=None, cpuset_reserved=0):
     'Ensure an instance cell can fit onto a host cell\n\n    Ensure an instance cell can fit onto a host cell and, if so, return\n    a new objects.InstanceNUMACell with the id set to that of the host.\n    Returns None if the instance cell exceeds the limits of the host.\n\n    :param host_cell: host cell to fit the instance cell onto\n    :param instance_cell: instance cell we want to fit\n    :param limit_cell: an objects.NUMATopologyLimit or None\n    :param cpuset_reserved: An int to indicate the number of CPUs overhead\n\n    :returns: objects.InstanceNUMACell with the id set to that of the\n              host, or None\n    '
