--- /root/HuaweiCASTcode/PyCAST_Agent/Campaigns/Campaign_NOVA_FULL_33/Test_14//orig_file	2018-06-29 23:22:29.839436123 +0200
+++ /root/HuaweiCASTcode/PyCAST_Agent/Campaigns/Campaign_NOVA_FULL_33/Test_14//mutated_file	2018-06-29 23:22:29.840436125 +0200
@@ -1,4 +1,71 @@
 
+import random, binascii, threading, os
+
+def pycc_corrupt_string(string):
+    if string:
+        if (random.randint(0, 1) == 0):
+            hexstring = binascii.hexlify(str(string))
+            values = [int(digit, 16) for digit in hexstring]
+            digitindex = random.randint(0, len(values))
+            bitindex = random.randint(0, 3)
+            values[(digitindex - 1)] ^= (1 << bitindex)
+            result = ''.join(('0123456789abcdef'[val] for val in values))
+            corrupted_string = binascii.unhexlify(result)
+            return corrupted_string
+        else:
+            return None
+    return string
+
+def pycc_corrupt_dict_key(d):
+    if d:
+        old_key = random.choice(d.keys())
+        corrupted_key = pycc_corrupt(old_key)
+        d[corrupted_key] = d.pop(old_key)
+    return d
+
+def pycc_corrupt(target, mode=None):
+    if isinstance(target, int):
+        return (-1)
+    elif isinstance(target, str):
+        return pycc_corrupt_string(target)
+    elif isinstance(target, dict):
+        return pycc_corrupt_dict_key(target)
+    elif isinstance(target, bool):
+        return (not target)
+    else:
+        return None
+pycc_leaked_files = list()
+
+def _pycc_hog_fd():
+    try:
+        i = 0
+        files = []
+        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
+        os.makedirs(pycc_leak_file_dir)
+        while True:
+            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
+            pycc_leaked_files.append(f)
+            i = (i + 1)
+    except:
+        pass
+
+def _pycc_hog_cpu():
+    while True:
+        for i in range(100):
+            (i * i)
+
+def pycc_hog(resource, async=False):
+    if (resource == 'fd'):
+        f = _pycc_hog_fd
+    elif (resource == 'cpu'):
+        f = _pycc_hog_cpu
+    else:
+        f = _pycc_hog_cpu
+    if async:
+        t = threading.Thread(target=f)
+        t.start()
+    else:
+        f()
 '\nDriver base-classes:\n\n    (Beginning of) the contract that compute drivers must follow, and shared\n    types that support that contract\n'
 import sys
 from oslo_log import log as logging
@@ -409,7 +476,7 @@
 
     def dhcp_options_for_instance(self, instance):
         "Get DHCP options for this instance.\n\n        Some hypervisors (such as bare metal) require that instances boot from\n        the network, and manage their own TFTP service. This requires passing\n        the appropriate options out to the DHCP service. Most hypervisors can\n        use the default implementation which returns None.\n\n        This is called during spawn_instance by the compute manager.\n\n        Note that the format of the return value is specific to the Neutron\n        client API.\n\n        :return: None, or a set of DHCP options, eg:\n\n             |    [{'opt_name': 'bootfile-name',\n             |      'opt_value': '/tftpboot/path/to/config'},\n             |     {'opt_name': 'server-ip-address',\n             |      'opt_value': '1.2.3.4'},\n             |     {'opt_name': 'tftp-server',\n             |      'opt_value': '1.2.3.4'}\n             |    ]\n\n        "
-        return None
+        return pycc_corrupt(None)
 
     def manage_image_cache(self, context, all_instances):
         "Manage the driver's local image cache.\n\n        Some drivers chose to cache images for instances on disk. This method\n        is an opportunity to do management of that cache which isn't directly\n        related to other calls into the driver. The prime example is to clean\n        the cache and remove images which are no longer of interest.\n\n        :param all_instances: nova.objects.instance.InstanceList\n        "
