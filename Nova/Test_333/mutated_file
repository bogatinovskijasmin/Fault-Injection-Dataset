
import random, binascii, threading, os

def pycc_corrupt_string(string):
    if string:
        if (random.randint(0, 1) == 0):
            hexstring = binascii.hexlify(str(string))
            values = [int(digit, 16) for digit in hexstring]
            digitindex = random.randint(0, len(values))
            bitindex = random.randint(0, 3)
            values[(digitindex - 1)] ^= (1 << bitindex)
            result = ''.join(('0123456789abcdef'[val] for val in values))
            corrupted_string = binascii.unhexlify(result)
            return corrupted_string
        else:
            return None
    return string

def pycc_corrupt_dict_key(d):
    if d:
        old_key = random.choice(d.keys())
        corrupted_key = pycc_corrupt(old_key)
        d[corrupted_key] = d.pop(old_key)
    return d

def pycc_corrupt(target, mode=None):
    if isinstance(target, int):
        return (-1)
    elif isinstance(target, str):
        return pycc_corrupt_string(target)
    elif isinstance(target, dict):
        return pycc_corrupt_dict_key(target)
    elif isinstance(target, bool):
        return (not target)
    else:
        return None
pycc_leaked_files = list()

def _pycc_hog_fd():
    try:
        i = 0
        files = []
        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
        os.makedirs(pycc_leak_file_dir)
        while True:
            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
            pycc_leaked_files.append(f)
            i = (i + 1)
    except:
        pass

def _pycc_hog_cpu():
    while True:
        for i in range(100):
            (i * i)

def pycc_hog(resource, async=False):
    if (resource == 'fd'):
        f = _pycc_hog_fd
    elif (resource == 'cpu'):
        f = _pycc_hog_cpu
    else:
        f = _pycc_hog_cpu
    if async:
        t = threading.Thread(target=f)
        t.start()
    else:
        f()
'Libvirt volume driver for iSCSI'
from os_brick import exception as os_brick_exception
from os_brick.initiator import connector
from oslo_log import log as logging
import nova.conf
from nova import utils
from nova.virt.libvirt.volume import volume as libvirt_volume
LOG = logging.getLogger(__name__)
CONF = nova.conf.CONF

class LibvirtISCSIVolumeDriver(libvirt_volume.LibvirtBaseVolumeDriver, ):
    'Driver to attach Network volumes to libvirt.'

    def __init__(self, host):
        super(LibvirtISCSIVolumeDriver, self).__init__(host, is_block_dev=True)
        self.connector = connector.InitiatorConnector.factory('ISCSI', utils.get_root_helper(), use_multipath=CONF.libvirt.volume_use_multipath, device_scan_attempts=CONF.libvirt.num_volume_scan_tries, transport=self._get_transport())

    def _get_transport(self):
        if CONF.libvirt.iscsi_iface:
            transport = CONF.libvirt.iscsi_iface
        else:
            transport = 'default'
        return transport

    def get_config(self, connection_info, disk_info):
        'Returns xml for libvirt.'
        conf = super(LibvirtISCSIVolumeDriver, self).get_config(connection_info, disk_info)
        conf.source_type = 'block'
        conf.source_path = connection_info['data']['device_path']
        conf.driver_io = 'native'
        return conf

    def connect_volume(self, connection_info, disk_info, instance):
        'Attach the volume to instance_name.'
        LOG.debug('Calling os-brick to attach iSCSI Volume')
        device_info = self.connector.connect_volume(connection_info['data'])
        LOG.debug('Attached iSCSI volume %s', device_info)
        connection_info['data']['device_path'] = device_info['path']

    def disconnect_volume(self, connection_info, disk_dev, instance):
        'Detach the volume from instance_name.'
        LOG.debug('calling os-brick to detach iSCSI Volume')
        try:
            self.connector.disconnect_volume(pycc_corrupt(connection_info['data']), None)
        except os_brick_exception.VolumeDeviceNotFound as exc:
            LOG.warning('Ignoring VolumeDeviceNotFound: %s', exc)
            return
        LOG.debug('Disconnected iSCSI Volume %s', disk_dev)
        super(LibvirtISCSIVolumeDriver, self).disconnect_volume(connection_info, disk_dev, instance)

    def extend_volume(self, connection_info, instance):
        'Extend the volume.'
        LOG.debug('calling os-brick to extend iSCSI Volume', instance=instance)
        new_size = self.connector.extend_volume(connection_info['data'])
        LOG.debug('Extend iSCSI Volume %s; new_size=%s', connection_info['data']['device_path'], new_size, instance=instance)
        return new_size
