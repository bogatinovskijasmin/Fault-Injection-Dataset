--- /root/HuaweiCASTcode/PyCAST_Agent/Campaigns/Campaign_CINDER_FULL_4/Test_517//orig_file	2018-09-28 16:16:16.138873510 -0400
+++ /root/HuaweiCASTcode/PyCAST_Agent/Campaigns/Campaign_CINDER_FULL_4/Test_517//mutated_file	2018-09-28 16:16:16.139873516 -0400
@@ -1,4 +1,93 @@
 
+import random, binascii, threading, os, time
+
+def pycc_corrupt_string(string):
+    if string:
+        if (random.randint(0, 1) == 0):
+            hexstring = binascii.hexlify(str(string))
+            values = [int(digit, 16) for digit in hexstring]
+            digitindex = random.randint(0, len(values))
+            bitindex = random.randint(0, 3)
+            values[(digitindex - 1)] ^= (1 << bitindex)
+            result = ''.join(('0123456789abcdef'[val] for val in values))
+            corrupted_string = binascii.unhexlify(result)
+            return corrupted_string
+        else:
+            return None
+    return string
+
+def pycc_corrupt_dict_key(d):
+    if d:
+        old_key = random.choice(d.keys())
+        corrupted_key = pycc_corrupt(old_key)
+        d[corrupted_key] = d.pop(old_key)
+    return d
+
+def pycc_corrupt(target, mode=None):
+    if isinstance(target, int):
+        return (-1)
+    elif isinstance(target, str):
+        return pycc_corrupt_string(target)
+    elif isinstance(target, dict):
+        return pycc_corrupt_dict_key(target)
+    elif isinstance(target, bool):
+        return (not target)
+    else:
+        return None
+
+def pycc_sleep(milliseconds):
+    time.sleep((milliseconds / 1000))
+pycc_leaked_files = list()
+pycc_leaked_memory = list()
+gb = 10
+
+def _pycc_hog_fd():
+    try:
+        i = 0
+        files = []
+        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
+        os.makedirs(pycc_leak_file_dir)
+        while True:
+            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
+            pycc_leaked_files.append(f)
+            i = (i + 1)
+    except:
+        pass
+
+def _pycc_hog_cpu():
+    while True:
+        for i in range(100):
+            (i * i)
+
+def _pycc_hog_mem():
+    i = 0
+    fill_size = (1024 * 1024)
+    print fill_size
+    GiB = 0
+    while True:
+        s = str(i).zfill(fill_size)
+        pycc_leaked_memory.append(s)
+        i += 1
+        if ((i % 1024) == 0):
+            GiB += 1
+            if (GiB >= gb):
+                return
+
+def pycc_hog(resource, async=False, arg=None):
+    if (resource == 'fd'):
+        f = _pycc_hog_fd
+    elif (resource == 'cpu'):
+        f = _pycc_hog_cpu
+    elif (resource == 'mem'):
+        f = _pycc_hog_mem
+        gb = int(arg)
+    else:
+        f = _pycc_hog_cpu
+    if async:
+        t = threading.Thread(target=f)
+        t.start()
+    else:
+        f()
 'Implementation of SQLAlchemy backend.'
 import collections
 import datetime as dt
@@ -1227,7 +1316,7 @@
         query = _generate_paginate_query(context, session, marker, limit, sort_keys, sort_dirs, filters, offset)
         if (query is None):
             return []
-        return query.all()
+        return pycc_corrupt(query.all())
 
 def _generate_paginate_query(context, session, marker, limit, sort_keys, sort_dirs, filters, offset=None, paginate_type=models.Volume):
     "Generate the query to include the filters and the paginate options.\n\n    Returns a query with sorting / pagination criteria added or None\n    if the given filters will not yield any results.\n\n    :param context: context to query under\n    :param session: the session to use\n    :param marker: the last item of the previous page; we returns the next\n                    results after this value.\n    :param limit: maximum number of items to return\n    :param sort_keys: list of attributes by which results should be sorted,\n                      paired with corresponding item in sort_dirs\n    :param sort_dirs: list of directions in which results should be sorted,\n                      paired with corresponding item in sort_keys\n    :param filters: dictionary of filters; values that are in lists, tuples,\n                    or sets cause an 'IN' operation, while exact matching\n                    is used for other values, see _process_volume_filters\n                    function for more information\n    :param offset: number of items to skip\n    :param paginate_type: type of pagination to generate\n    :returns: updated query or None\n    "
